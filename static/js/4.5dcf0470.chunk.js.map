{"version":3,"sources":["../../../src/table.tsx","Map.jsx"],"names":["Table","forwardRef","styles","useMultiStyleConfig","omitThemingProps","className","value","role","ref","__css","cx","TableCaption","placement","useStyles","captionSide","Tbody","tbody","Tr","tr","Td","isNumeric","rest","data-is-numeric","Variable","loadable","name","colorFor","props","bg","p","Object","entries","map","val"],"mappings":"4hBAeO,IAyBMA,EAAQC,aAAgC,cACnD,IAAMC,EAASC,YAAoB,QAAnC,GACA,EAAqCC,YAArC,GAAQC,EAAR,EAAQA,UAAR,qBAEA,OACE,qBAAgBC,MAAOJ,GACrB,gBAAC,IAAD,SACEK,KADF,QAEEC,IAFF,EAGEC,MAAOP,EAHT,MAIEG,UAAWK,YAAG,eAAgBL,IANpC,QAaE,EAAJ,IACEL,uBAWK,IAAMW,EAAeV,aAC1B,cAAgB,MACd,EAAQW,iBADM,MACM,SADN,EACd,qBACMV,EAASW,cACf,OACE,gBAAC,IAAD,gBAEEL,IAFF,EAGEC,MAAK,KACAP,EADA,SAEHY,YAAaF,UAOnB,EAAJ,IACED,8BAKK,IAOMI,EAAQd,aAAoC,cACvD,IAAMC,EAASW,cACf,OAAO,gBAAC,IAAD,cAAyBL,IAAzB,EAAmCC,MAAOP,EAAOc,YA+B7CC,EAAKhB,aAAgC,cAChD,IAAMC,EAASW,cAEf,OAAO,gBAAC,IAAD,MAAWN,KAAK,OAAhB,GAAiCC,IAAjC,EAA2CC,MAAOP,EAAOgB,SASrDC,EAAKlB,aAChB,cAAC,IAAEmB,EAA8B,EAA9BA,UAAcC,EAAgB,mBACzBnB,EAASW,cAEf,OACE,gBAAC,IAAD,MACEN,KAAK,YADP,GAGEC,IAHF,EAIEC,MAAOP,EAJT,GAKEoB,kBAAiBF,Q,OCrJnBG,EAAWC,aAAS,kBAAM,0CAEjB,0BACbC,EADa,EACbA,KAAMnB,EADO,EACPA,MADO,IACAoB,gBADA,MACW,iBAAM,aADjB,EACiCC,EADjC,kDAGb,eAAC3B,EAAD,CAAO4B,GAAG,YAAYC,EAAG,GAAzB,UACE,cAAClB,EAAD,UAAec,IACf,cAACV,EAAD,UACIe,OAAOC,QAAQzB,GAAO0B,KAAI,mCAAEP,EAAF,KAAQQ,EAAR,YAC1B,eAAChB,EAAD,WACE,cAACE,EAAD,CAAIS,GAAIF,EAASD,GAAOI,EAAG,EAA3B,SACEJ,IACF,cAACN,EAAD,UAAI,cAACI,EAAD,aAAUjB,MAAO2B,GAASN","file":"static/js/4.5dcf0470.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TableContainerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const TableContainer = forwardRef<TableContainerProps, \"div\">(\n  (props: HTMLChakraProps<\"div\">, ref) => {\n    const { overflow, overflowX, className, ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-table__container\", className)}\n        {...rest}\n        __css={{\n          display: \"block\",\n          whiteSpace: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n          overflowX: overflow ?? overflowX ?? \"auto\",\n          overflowY: \"hidden\",\n          maxWidth: \"100%\",\n        }}\n      />\n    )\n  },\n)\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    ThemingProps<\"Table\"> {}\n\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.table\n        role=\"table\"\n        ref={ref}\n        __css={styles.table}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </StylesProvider>\n  )\n})\n\nif (__DEV__) {\n  Table.displayName = \"Table\"\n}\n\nexport interface TableCaptionProps extends HTMLChakraProps<\"caption\"> {\n  /**\n   * The placement of the table caption. This sets the `caption-side` CSS attribute.\n   * @default \"bottom\"\n   */\n  placement?: \"top\" | \"bottom\"\n}\n\nexport const TableCaption = forwardRef<TableCaptionProps, \"caption\">(\n  (props, ref) => {\n    const { placement = \"bottom\", ...rest } = props\n    const styles = useStyles()\n    return (\n      <chakra.caption\n        {...rest}\n        ref={ref}\n        __css={{\n          ...styles.caption,\n          captionSide: placement,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\"\n}\n\nexport interface TableHeadProps extends HTMLChakraProps<\"thead\"> {}\n\nexport const Thead = forwardRef<TableHeadProps, \"thead\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.thead {...props} ref={ref} __css={styles.thead} />\n})\n\nexport interface TableBodyProps extends HTMLChakraProps<\"tbody\"> {}\n\nexport const Tbody = forwardRef<TableBodyProps, \"tbody\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.tbody {...props} ref={ref} __css={styles.tbody} />\n})\n\nexport interface TableFooterProps extends HTMLChakraProps<\"tfoot\"> {}\n\nexport const Tfoot = forwardRef<TableFooterProps, \"tfoot\">((props, ref) => {\n  const styles = useStyles()\n  return <chakra.tfoot {...props} ref={ref} __css={styles.tfoot} />\n})\n\nexport interface TableColumnHeaderProps extends HTMLChakraProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right\n   */\n  isNumeric?: boolean\n}\nexport const Th = forwardRef<TableColumnHeaderProps, \"th\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.th\n        {...rest}\n        ref={ref}\n        __css={styles.th}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n\nexport interface TableRowProps extends HTMLChakraProps<\"tr\"> {}\nexport const Tr = forwardRef<TableRowProps, \"tr\">((props, ref) => {\n  const styles = useStyles()\n\n  return <chakra.tr role=\"row\" {...props} ref={ref} __css={styles.tr} />\n})\n\nexport interface TableCellProps extends HTMLChakraProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right\n   */\n  isNumeric?: boolean\n}\nexport const Td = forwardRef<TableCellProps, \"td\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useStyles()\n\n    return (\n      <chakra.td\n        role=\"gridcell\"\n        {...rest}\n        ref={ref}\n        __css={styles.td}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import loadable from '@loadable/component'\nimport {\n  Table, TableCaption, Tbody, Tr, Td,\n} from '@chakra-ui/react'\n\nconst Variable = loadable(() => import('./Variable'))\n\nexport default ({\n  name, value, colorFor = () => '#FF000033', ...props\n}) => (\n  <Table bg=\"#81007FDD\" p={12}>\n    <TableCaption>{name}</TableCaption>\n    <Tbody>\n      {(Object.entries(value).map(([name, val]) => (\n        <Tr>\n          <Td bg={colorFor(name)} p={3}\n          >{name}</Td>\n          <Td><Variable value={val} {...props}/></Td>\n        </Tr>\n      )))}\n    </Tbody>\n  </Table>\n)"],"sourceRoot":""}