// From: http://ihatecode.blogspot.com/2008/10/simple-jquery-uid-plugin.html
( function( $ ) {
    $.fn.uid = function( prefix ) {  
        if( ! prefix ) {
            prefix = "uid"
        }

        var generate = function() {
            var dt = new Date().getMilliseconds()
            var num = Math.random()
            var rnd = Math.round( num * 100000 )
            return prefix + dt + rnd
        }

        return this.each( function() {  
            this.id = generate()
            return $
        })
    }
})( jQuery );

function addFile( entry, $parent ) {
    var $new = $('<li/>').addClass( 'file' )
    if( entry.file ) {
        entry.file( function( file ) {
            var objectURL = window.URL.createObjectURL( file )
            var $link = $('<a/>').attr( { target: 'new', href: objectURL } ).text( file.name )
            $new.append( $link )
        } )
    } else {
        var $link = $('<a/>').text( entry.name )
        $new.append( $link )
    }
    $parent.append( $new )
    return $new
}

function addDirectory( entry, $parent, id ) {
    var $new = $('<li/>').attr( { id: id } )
    var $input = $('<input/>').attr( {
        type: 'checkbox',
        id: id
    } )
    $new.append( $input )
        .append( $('<label/>').attr( { 'for': $input.attr( 'id' ) } ).text( entry.name ) )
    
    var $fileList = $('<ol/>')
    $new.append( $fileList )
    
    if( entry.createReader ) {
        var dirReader = entry.createReader()
        dirReader.readEntries( function( entries ) {
            $fileList.data( { 'file-entries': entries } )
            for( var i = 0; i < entries.length; i++ ) {
                addEntry( entries[i], $fileList )
            }
        } )
    }
    $parent.append( $new )
    return $new
}

function addObject( object, $parent, id ) {
    if( ! id ) {
        id = ''
    }
    if( id.length > 0 ) {
        id += ' - '
    }
    var props = []
    for( prop in object ) {
        props.push( prop )
    }
    props = props.sort()
    $.each( props, function( index, prop ) {
        var newId = id + prop
        if( typeof object[ prop ] == 'object' ) {
            var $prop = addDirectory( { name: prop }, $parent, newId )
            addObject( object[ prop ], $prop.find( 'ol' ), newId )
        } else {
            addFile( {
                name: prop,
                value: object[ prop ]
            },
                     $parent,
                     newId )
        }
    } )
}

$( function() {
    $.event.props.push('dataTransfer')

    var drop = function( event ) {
	event.preventDefault()

        function addEntry( entry, $parent ) {
            var $new = $('<li/>')

            if( entry.isFile ) {
                addFile( entry, $parent )
            } else if( item.isDirectory ) {
                addDirectory( entry, $parent )
            }
        }

        var items = event.dataTransfer.items
        var entries = []
        var $list = $(event.target).parent().find( 'ol' ).first()
        for( var i = 0; i < items.length; i++ ) {
            var item = items[i].webkitGetAsEntry()
            addEntry( item, $list )
            entries.push( item )
        }
        //$list.data( { 'file-entries': entries } )
    }

    function dragEnter( e ) {
        e.preventDefault()
    }
    
    function dragOver( e ) {
        e.preventDefault()
    }
     
    function dragLeave( e ) {
        e.stopPropagation()
    }
    
    $(document).on( 'drop', '#filelist, input, label', drop )
        .bind( 'dragenter', dragEnter )
        .bind( 'dragover', dragOver )
        .bind( 'dragleave', dragLeave )

    var $lastSelected
    function selectLabel( id ) {
        var $label = $('[for="' + id + '"]')

        if( $lastSelected ) {
            $lastSelected.removeClass( 'selected' )
        }
        $label.addClass( 'selected' )

        $lastSelected = $label

        var $parent = $label.parent()
        $parent.parents().children( 'input' ).attr( { checked: 'checked' } )

        /*
        pouchdb.get( { _id: id }, function( err, doc ) {
            for( prop in doc ) {
            }
        } )
        */

        // ToDo: Scoll selected item visible
        //$('#files').animate( { scrollTop: $label.offset().top }, 'slow' )

        function addRow( name, size, type ) {
            $('#fileview').dataTable().fnAddData( [ name, size, type ] )
        }

        $('#fileview').dataTable().fnClearTable()

        var entries = $label.parent().find( 'ol' ).first().data( 'file-entries' )
        if( entries ) {
            for( var i = 0; i < entries.length; i++ ) {
                if( entries[i].isDirectory ) {
                    var dirReader = entries[i].createReader()

                    var onSuccess = function( files ) {
                        addRow( arguments.callee.dirname, files.length, 'text/directory' )
                    }
                    onSuccess.dirname = entries[i].name

                    dirReader.readEntries(
                        onSuccess,
                        function() {
                            console.log( "Failed to read: " + entries[i].name )
                        } )
                } else {
                    entries[i].file( function( file ) {
                        var objectURL = window.URL.createObjectURL( file )
                        var $link = $('<a/>').attr( { target: 'new', href: objectURL } ).text( file.name )
                        addRow( $link.prop( 'outerHTML' ), file.size, file.type )
                    } )
                }
            }
        } else {
            $label.siblings( 'ol' ).children( 'li' ).each( function( index, item ) {
                var $item = $(item)
                var $label = $item.children( 'label' )
                var $link = $('<a/>').attr( { 'ref-id': $label.attr( 'for' ) } ).text( $label.text() )
                addRow( $link.prop( 'outerHTML' ), $item.children( 'ol' ).children().size(), 'text/directory' )
            } )
        }
    }

    $(document).on( 'click', 'label', function( event ) {
        var forInput = $(this).attr( 'for' )
        if( forInput ) {
            event.preventDefault()
            selectLabel( forInput )
        }
    } )

    $(document).on( 'click', '#filelist a', function( event ) {
        event.preventDefault()
        selectLabel( $(this).attr( 'ref-id' ) )
    } )

    $(document).on( 'dblclick', '#filelist, input, label', function( event ) {
        var $item = $(event.target).prev()
        // Is setting, but the page isn't updating
        //$item.attr( 'checked', ! $item.attr( 'checked' ) )
        if( $item.size() > 0 ) {
            if( $item.attr( 'checked' ) ) {
                $item.get(0).removeAttribute( 'checked' )
            } else {
                $item.get(0).setAttribute( 'checked', 'checked' )
            }
        }
    } )

    $('#fileview').dataTable( {
        sDom: "<'row-fluid'<'span4'l><'span4'f>r>t<'row-fluid'<'span3'i><'span5'p>>",
        sPaginationType: 'bootstrap',
        oLanguage: {
            sLengthMenu: '_MENU_ per page'
        }
    } )

    var world = {}

    // After all data sets are loaded, update the tree
    ;( function() {
        var updateCount = 0
        $('#world').on( 'update', function() {
            if( ++updateCount >= 2 ) {
                var $parent = $('#world ~ ol')
                $parent.empty()
                addObject( world, $parent )
            }
        } )
    } )()

    loadAward( 'Hugo', 'book', '/en/hugo_award', world )
    loadAward( 'Nebula', 'book', '/en/nebula_award', world )
    //loadAward( 'Academy', 'movie', '/en/academy_awards' )
} )
