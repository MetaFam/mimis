import{d as l,b as g,e as y,f as k,g as m,c as L,h as W}from"./DIyLzQDu.js";import"./DNNdfCMU.js";const b=l,p=({writer:e,settings:t=b(),metadata:r={}})=>new u({writer:e,metadata:r,settings:t,entries:new Map,closed:!1}),D=(e,t,r,{overwrite:s=!1}={})=>{const i=a(e.state);if(t.includes("/"))throw new Error(`Directory entry name "${t}" contains forbidden "/" character`);if(!s&&i.entries.has(t))throw new Error(`Directory already contains entry with name "${t}"`);return i.entries.set(t,r),e},$=(e,t)=>(a(e.state).entries.delete(t),e),a=e=>{if(e.closed)throw new Error("Can not change written directory, but you can .fork() and make changes to it");return e},z=async(e,{closeWriter:t=!1,releaseLock:r=!1}={})=>{const{writer:s,settings:i,metadata:d}=a(e.state);e.state.closed=!0;const c=[...h(e)],w=g(c,d),n=y(w),f=await i.hasher.digest(n),o=i.linker.createLink(k,f);return(s.desiredSize||0)<=0&&await s.ready,s.write({cid:o,bytes:n}),t?await s.close():r&&s.releaseLock(),{cid:o,dagByteLength:m(n,c)}},h=function*({state:e}){for(const[t,{dagByteLength:r,cid:s}]of e.entries)yield{name:t,dagByteLength:r,cid:s}},B=({state:e},{writer:t=e.writer,metadata:r=e.metadata,settings:s=e.settings}={})=>new u({writer:t,metadata:r,settings:s,entries:new Map(e.entries.entries()),closed:!1});class u{constructor(t){this.state=t}get writer(){return this.state.writer}get settings(){return this.state.settings}links(){return h(this)}set(t,r,s){return D(this,t,r,s)}remove(t){return $(this,t)}fork(t){return B(this,t)}close(t){return z(this,t)}entries(){return this.state.entries.entries()}has(t){return this.state.entries.has(t)}get size(){return this.state.entries.size}}const _=({writable:e,settings:t=l()})=>new E({writer:e.getWriter(),settings:t}),C=async(e,{releaseLock:t=!0,closeWriter:r=!0}={})=>(r?await e.writer.close():t&&e.writer.releaseLock(),e);class E{constructor({writer:t,settings:r}){this.writer=t,this.settings=L(r)}createFileWriter({settings:t=this.settings,metadata:r}={}){return W({writer:this.writer,settings:t,metadata:r})}createDirectoryWriter({settings:t=this.settings,metadata:r}={}){return p({writer:this.writer,settings:t,metadata:r})}close(t){return C(this,t)}}const M=1048576,F=M*100,x=(e=F)=>({highWaterMark:e,size:t=>t.bytes.length});export{p as a,_ as c,$ as r,D as s,x as w};
