import"../chunks/CWj6FrbW.js";import{p as N,al as k,aj as _,f as I,s as c,a as C,d as h,k as p,aL as M,b as T,c as S,$ as z,ak as H,r as f}from"../chunks/obqp2paV.js";import{d as j}from"../chunks/BSrLC8Pd.js";import{h as x}from"../chunks/CES1JxZU.js";import{e as O,i as P}from"../chunks/0qJetFIX.js";import{T as D}from"../chunks/izcudvy4.js";import{P as R}from"../chunks/BEQ4o2WB.js";import{g as $}from"../chunks/DNNdfCMU.js";import{v as b}from"../chunks/CynzQA2G.js";async function B(o){const n=$();o=o.filter(Boolean);const t=o.pop();await Promise.all(o.map(async a=>{const i=n.session();try{await i.run(`
        MATCH (e) WHERE elementId(e) = $equivId
        MATCH (t) WHERE elementId(t) = $targetId
        MERGE (e)-[eq:EQUALS]->(t)
        ON CREATE SET eq.mimis_id = $uuid
        RETURN $uuid
      `,{equivId:a,targetId:t,uuid:b()})}finally{i.close()}}))}async function F({path:o}){const t=$().session();try{const a="MERGE (r:Root) RETURN elementId(r) AS id",{records:[i]}=await t.run(a);let r=i.get("id");const d=[...o];for(;d.length>0;){const E=d.shift(),m=`
        MATCH (base) WHERE elementId(base) = $current
        MERGE (base)-[cont:CONTAINS { path: $elem }]->(node:Spot)
        ON CREATE SET cont.mimis_id = $contUUID
        ON CREATE SET node.mimis_id = $nodeUUID
        RETURN elementId(node) AS id
      `,{records:[u]}=await t.run(m,{current:r,elem:E,contUUID:b(),nodeUUID:b()});r=u.get("id")}return r}finally{t.close()}}var G=(o,n)=>n.push([""]),W=I('<li><label class="svelte-1defoz0"> <!></label></li>'),L=I('<header><h1>Create Equivalencies</h1></header> <main class="svelte-1defoz0"><button class="svelte-1defoz0"><span>Add From Path</span></button> <ol></ol> <label class="svelte-1defoz0">To: <!></label> <button class="svelte-1defoz0"><span>Mark Equal</span></button></main>',1);function oe(o,n){N(n,!0);let t=k(_([""])),a=_([[""]]);const i=M(()=>async()=>{try{const e=a.map(s=>s.filter(Boolean)).filter(s=>s.length>0);if(e.length===0)throw new Error("No `from` paths specified.");if(!p(t).every(Boolean))throw new Error("No `to` path specified.");const l=await Promise.all([...e,p(t)].map(async s=>await F({path:s})));console.debug({dataful:e,to:p(t),nodeIds:l}),await B(l)}catch(e){D({text:`Error: ${e.message}`,duration:12e3,close:!0,gravity:"bottom",position:"center",stopOnFocus:!0,style:{background:"linear-gradient(to right, #b09b22, #969d)"}}).showToast()}});var r=L();x(e=>{z.title="MÃ¯mis: Equivalancies"});var d=c(C(r),2),E=h(d);E.__click=[G,a];var m=c(E,2);O(m,21,()=>a,P,(e,l,s)=>{var v=W(),g=h(v),y=h(g);y.nodeValue=`From #${s+1}: `;var q=c(y);R(q,{get elements(){return a[s]},set elements(A){a[s]=A}}),f(g),f(v),T(e,v)}),f(m);var u=c(m,2),w=c(h(u));R(w,{get elements(){return p(t)},set elements(e){H(t,e,!0)}}),f(u);var U=c(u,2);U.__click=function(...e){var l;(l=p(i))==null||l.apply(this,e)},f(d),T(o,r),S()}j(["click"]);export{oe as component};
